{"version":3,"sources":["List.js","App.js","serviceWorker.js","index.js"],"names":["List","props","state","edited","filter","tasks","text","kind","important","input","React","createRef","this","setState","current","value","new_task","console","log","slice","unshift","localStorage","setItem","JSON","stringify","key","id","field","splice","list","map","item","index","finished","Card","border","bg","Header","className","onClick","setTaskField","Body","Text","Button","size","variant","role","aria-label","taskEdited","Row","Col","md","Form","Control","placeholder","ref","onChange","e","target","InputGroup","Append","as","custom","selected","saveTask","Nav","defaultActiveKey","Item","Link","href","changeState","CardColumns","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91ddc467.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardColumns, Button, Nav, Row,Col, InputGroup, Form} from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\n\r\n//задание компонента через класс\r\nclass List extends React.Component {\r\n  constructor(props) {\r\n  \t\tsuper(props); //вызвать конструктор наследуемого класса, т.е. React.Component\r\n\r\n\r\n\r\n      //let tasks =  localStorage.getItem('tasks')? JSON.parse(localStorage.getItem('tasks')) :   [{text:\"создать первую задачу\", kind:'🦟', important: 1}];\r\n      let tasks =[{text:\"создать первую задачу\", kind:'🦟', important: 0},{text:\"создать первую задачу\", kind:'🦟', important: 1}]\r\n      this.state = {\r\n        edited: null,\r\n        filter:'all',\r\n  \t\t\ttasks: tasks\r\n        };\r\n\r\n      this.input = React.createRef();\r\n      this.important = React.createRef();\r\n      this.kind = React.createRef();\r\n  \t}\r\n\r\n  saveTask(){\r\n    if(this.state.edited!==null){\r\n      this.setState({edited:null});\r\n    }else{\r\n    if(this.input.current.value==='') return false;\r\n      let new_task ={\r\n        'text':  this.input.current.value,\r\n        'important': this.important.current.value,\r\n        'kind': this.kind.current.value,\r\n      }\r\n      console.log(new_task);\r\n      let tasks = this.state.tasks.slice();\r\n      tasks.unshift(new_task);\r\n      localStorage.setItem('tasks', JSON.stringify(tasks));\r\n      this.setState({tasks});\r\n    }\r\n    this.input.current.value=\"\";\r\n    this.important.current.value=\"☆\";\r\n    this.kind.current.value=\"🦟\";\r\n  }\r\n\r\n  changeState(key, value){\r\n      if(key === 'filter'){\r\n        let filter = value;\r\n        this.setState({filter});\r\n      }else if(key === 'edited'){\r\n        let edited = value;\r\n        this.setState({edited});\r\n      }\r\n\r\n    }\r\n\r\n  setTaskField(id,field,value){\r\n    let tasks = this.state.tasks.slice();\r\n    if(field === 'delete'){\r\n      tasks.splice(id,1);\r\n    }else{\r\n      tasks[id][field] = value;\r\n    }\r\n    localStorage.setItem('tasks', JSON.stringify(tasks));\r\n    this.setState({tasks});\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n\r\n      let list = this.state.tasks.map((item,index) => {\r\n        if(this.state.filter === 'important' && !item.important) {return false;}\r\n        else if(this.state.filter === 'plans' && item.finished) {return false;}\r\n        else if(this.state.filter === 'finished' && !item.finished) {return false;}\r\n        return (\r\n        <Card key={index} border={item.important && 'danger'} text={item.finished && 'success'} bg={item.finished && 'light'}>\r\n          <Card.Header className=\"py-1\">\r\n            <div className=\"float-left emoji\" >{item.kind}</div>\r\n            <div className=\"importantBlock float-right emoji\" onClick={()=>this.setTaskField(index,'important', !item.important)}>{item.important  ? '⭐'  : '☆' }</div>\r\n            <div className=\"importantBlock float-right emoji\" onClick={()=>this.setState({edited:index})}> ✏ </div>\r\n\r\n\r\n          </Card.Header>\r\n          <Card.Body >\r\n            <Card.Text>{item.text}</Card.Text>\r\n            <Button size=\"sm\" variant=\"danger\" className=\"float-left emoji mb-1\" onClick={()=>this.setTaskField(index,'delete', true)}><span role=\"img\" aria-label=\"ok\">🗑</span></Button>\r\n\r\n            <Button size=\"sm\" variant=\"success\" className=\"float-right emoji mb-1\" onClick={()=>this.setTaskField(index,'finished', !item.finished)}><span role=\"img\" aria-label=\"ok\">👌</span></Button>\r\n          </Card.Body>\r\n        </Card>\r\n      )});\r\n\r\n    let taskEdited=(this.state.edited!==null)?this.state.tasks[this.state.edited] : {important:'',kind:''};\r\n\r\n\r\n    return (\r\n\r\n      <>\r\n      <Row>\r\n\r\n\r\n        <Col  md=\"8\" className=\"py-3\">\r\n          <Form.Control placeholder='текст новой задачи'\r\n            value={taskEdited.text? taskEdited.text: null}\r\n            ref={this.input}\r\n            onChange={(e)=>{this.state.edited!==null && this.setTaskField(this.state.edited,'text', e.target.value)} }\r\n          />\r\n          </Col>\r\n          <Col  md=\"4\" className=\"py-3\">\r\n          <InputGroup>\r\n            <InputGroup.Append>\r\n            <Form.Control as=\"select\" custom\r\n              ref={this.important}\r\n              onChange={(e)=>(this.state.edited!==null && this.setTaskField(this.state.edited,'important', (e.target.value=='⭐'?1:0)))}\r\n              >\r\n              <option >☆</option>\r\n              <option selected={taskEdited.important && true}>⭐</option>\r\n            </Form.Control>\r\n              <Form.Control as=\"select\" custom\r\n                ref={this.kind}\r\n                onChange={(e)=>(this.state.edited!==null && this.setTaskField(this.state.edited,'kind', e.target.value))}\r\n              >\r\n                <option selected={taskEdited.kind=='🦟' && 'selected'}>🦟</option>\r\n                <option selected={taskEdited.kind=='🌕' && 'selected'}>🌕</option>\r\n                <option selected={taskEdited.kind=='🌷' && 'selected'}>🌷</option>\r\n                <option selected={taskEdited.kind=='⁉' && 'selected'}>⁉</option>\r\n                <option selected={taskEdited.kind=='🦄' && 'selected'} >🦄</option>\r\n              </Form.Control>\r\n              <Button  onClick={()=>this.saveTask()}>сохр.</Button>\r\n            </InputGroup.Append>\r\n            </InputGroup>\r\n            </Col>\r\n\r\n\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n         <Nav variant=\"tabs\" defaultActiveKey=\"#all\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#all\" onClick={()=>this.changeState('filter','all')}> Все </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#important\" onClick={()=>this.changeState('filter','important')}> Важные </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#plans\" onClick={()=>this.changeState('filter','plans')}> Планируемые</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#finished\" onClick={()=>this.changeState('filter','finished')}> Сделанные </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n         <CardColumns className=\"m-3\">\r\n           {list}\r\n        </CardColumns>\r\n      </Row>\r\n      </>\r\n       );\r\n     }\r\n\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\nimport {Container } from 'react-bootstrap';\nimport List from './List.js';\n\nfunction App() {\n\n  return (\n    <>\n    <Container className=\"my-4\">\n\n        <List />\n\n    </Container>\n    <Container className=\"my-4\">\n      <ul>* Описание видов задач:\n        <li> <span role=\"img\" aria-label=\"fly\">🦟</span> - мухи. Их надо быстро прихлопывать в начале дня, чтобы не надоедали.</li>\n        <li> <span role=\"img\" aria-label=\"cheese\">🌕</span> - большая голова сыра (\"слоны\"). Ее за раз не проглотить - делите по порциям или \"выедайте\" наиболее удобные для решения куски.</li>\n        <li> <span role=\"img\" aria-label=\"flower\">🌷</span> - цветы. Приятные задачи, которые тоже должны быть в каждом дне и радовать нас. Не забывайте их включать в план для поднятия настроения. </li>\n        <li> <span role=\"img\" aria-label=\"question\">⁉</span> - вопросы. С ними не всё понятно - надо принимать решение. Соберитесь с духом и приступайте с нужным настроем.</li>\n        <li> <span role=\"img\" aria-label=\"unicorn\"> 🦄</span> - единороги. Заветные, но неконкретные мечты, наровящие затеряться среди буднечных дел. Помните о главном и переводите их разряд \"сыров\"! </li>\n\n      </ul>\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}